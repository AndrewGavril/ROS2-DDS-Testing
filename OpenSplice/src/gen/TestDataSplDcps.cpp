#include "TestData_DCPS.hpp"

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

v_copyin_result
__TestDataType__copyIn(
    c_type dbType,
    const class TestDataType *from,
    struct _TestDataType *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) dbType;

    to->id = (c_short)from->id();
    to->timestamp = (c_ulonglong)from->timestamp();
    {
        /* Code generated by /home/andrew/work/opensplice/src/tools/idlpp/code/idl_genISOCxx2Copyin.c at line 671 */

        c_type type0 = c_memberType(c_structureMember(c_structure(dbType), 2));
        c_char *dest0;
        const ::TestDataType::_data_seq *src = &from->data();

        c_ulong length0 = (c_ulong)(*src).size();
         dest0 = (c_char *)c_newSequence(c_collectionType(type0), length0);
        {
            /* Code generated by /home/andrew/work/opensplice/src/tools/idlpp/code/idl_genISOCxx2Copyin.c at line 1598 */
            if(length0 > 0)
            {
                const c_char *buf0;
                buf0 = reinterpret_cast<const c_char *>(&((*src)[0]));
                memcpy (dest0,buf0,length0* sizeof(*dest0));
            }
        }
        to->data = (c_sequence) dest0;
    }
    return result;
}

void
__TestDataType__copyOut(
    const void *_from,
    void *_to)
{
    const struct _TestDataType *from = (const struct _TestDataType *)_from;
    class TestDataType *to = (class TestDataType *)_to;
    to->id((int16_t)from->id);
    to->timestamp((uint64_t)from->timestamp);
    {
        long size0;
        const c_char *src0 = (const c_char *)from->data;
        std::vector<char>  *dst = &to->data();

        size0 = c_arraySize(c_sequence(from->data));
        to->data().clear();
        to->data().reserve(size0);
            (*dst).assign(src0, src0 + size0);
    }
}

